/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tientt.view;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import tientt.dtos.ItemDTO;
import tientt.dtos.SupplierDTO;
import tientt.exceptions.ItemExistedException;
import tientt.logger.CustomLogger;
import tientt.services.interfaces.ItemService;
import tientt.services.interfaces.SupplierService;
import tientt.exceptions.ItemInvalidException;
import tientt.mapper.interfaces.ItemViewObjectMapper;
import tientt.view.tablemodel.ItemTableModel;
import tientt.view.tablemodel.TableModel;
import tientt.view.viewobject.ItemViewObject;

/**
 *
 * @author natton
 */
public class ItemPanel extends javax.swing.JPanel {

    private static final String[] TABLE_HEADERS = {"Code", "Name", "Supplier", "Price", "Supply"};
    private static final int[] TABLE_INDEXES = {1, 2, 5, 4, 6};
    private final SupplierService supplierService;
    private final ItemService itemService;
    private final ItemViewObjectMapper mapper;
    private List<SupplierDTO> supplierList;
    private static final Logger LOGGER = CustomLogger.getLogger();

    private TableModel<ItemViewObject> model;
    //private boolean isUpdate = false;
    private boolean isAddNew = true;

    public ItemPanel() {
        this.itemService = ItemService.getNewInstance();
        this.supplierService = SupplierService.getNewInstance();
        this.mapper = ItemViewObjectMapper.getNewInstance();
        initComponents();
        initTable();
        initCombobox();
    }

    private void initTable() {
        model = new ItemTableModel(TABLE_HEADERS, TABLE_INDEXES);
        tblItem.setModel(model);
        try {
            List<ItemDTO> listDTO = itemService.findAllItems();
            List<ItemViewObject> listItemViewObject = mapper.toListViewObject(listDTO);
            model.loadData(listItemViewObject);
        } catch (SQLException | ClassNotFoundException e) {
            LOGGER.log(Level.SEVERE, ItemPanel.class.getName() + "::" + e.getMessage());
        }
    }

    protected void initCombobox() {
        comboxSupplier.removeAllItems();
        try {
            supplierList = supplierService.findAllSuppliers();
            supplierList.forEach((supplier) -> {
                comboxSupplier.addItem(supplier);
            });
        } catch (SQLException | ClassNotFoundException e) {
            LOGGER.log(Level.SEVERE, ItemPanel.class.getName() + "::" + e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        comboxSupplier = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUnit = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        cboxSupplying = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();

        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItem);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Item's detail"));

        jLabel1.setText("Item Code");

        jLabel2.setText("Item Name");

        jLabel3.setText("Supplier");

        jLabel4.setText("Unit");

        jLabel5.setText("Price");

        jLabel6.setText("Supplying");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtItemCode))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(txtUnit)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxSupplying))))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(comboxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(cboxSupplying))
                .addGap(89, 89, 89))
        );

        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        btnNew.setText("Add New");
        btnNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(41, 41, 41)
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnNew)
                            .addComponent(btnDelete))))
                .addGap(0, 19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemMouseClicked
        int rowIndex = tblItem.getSelectedRow();
        ItemViewObject item = model.getData().get(rowIndex);
        //set view detail panel
        txtItemCode.setText(item.getItemCode());
        txtItemCode.setEnabled(false);
        txtItemName.setText(item.getItemName());
        txtUnit.setText(item.getUnit());
        txtPrice.setText(item.getPrice());
        cboxSupplying.setSelected(item.isSupplying());
        //set correct supplier of item
        int supplierIndex = supplierList.indexOf(new SupplierDTO(item.getSupCode()));
        comboxSupplier.setSelectedIndex(supplierIndex);
        isAddNew = false;

    }//GEN-LAST:event_tblItemMouseClicked

    private void btnNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewMouseClicked
        txtItemCode.setText("");
        txtItemCode.setEnabled(true);
        txtItemName.setText("");
        txtUnit.setText("");
        txtPrice.setText("");
        cboxSupplying.setSelected(false);
        tblItem.getSelectionModel().clearSelection();
        comboxSupplier.setSelectedItem(0);
        isAddNew = true;
    }//GEN-LAST:event_btnNewMouseClicked
    private void deleteItem() {
        try {
            //call model
            int selectedRow = tblItem.getSelectedRow();
            ItemViewObject viewObject = model.getData().get(selectedRow);
            boolean result = itemService.deleteItem(viewObject.getItemCode());
            if (result) {
                model.delete(selectedRow);
            }
            //update view
            btnNewMouseClicked(null);
            tblItem.updateUI();
        } catch (ClassNotFoundException | SQLException e) {
            LOGGER.log(Level.SEVERE, ItemPanel.class.getName() + "::" + e.getMessage());
        }
    }
    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        if (isAddNew) {
            JOptionPane.showMessageDialog(this, "Please choose an item");
            return;
        }
        int userChoice = JOptionPane.showConfirmDialog(this, "Are you sure?", "Delete confirmation",
                JOptionPane.OK_CANCEL_OPTION);
        if (userChoice == JOptionPane.OK_OPTION) {
            deleteItem();
        }


    }//GEN-LAST:event_btnDeleteMouseClicked
    private void displayError(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    private ItemViewObject getItemNewInfo() {
        String itemCode = txtItemCode.getText().trim();
        String itemName = txtItemName.getText().trim();
        String unit = txtUnit.getText().trim();
        String priceString = txtPrice.getText().trim();
        boolean suppying = cboxSupplying.isSelected();
        SupplierDTO supplier = (SupplierDTO) comboxSupplier.getSelectedItem();
        ItemViewObject viewObject = new ItemViewObject(itemCode, itemName, 
                unit, priceString, suppying, supplier.getSupCode());
        return viewObject;

    }

    private boolean updateItem() throws ClassNotFoundException, SQLException, ItemInvalidException {
        boolean result;
        //call model
        int selectedRow = tblItem.getSelectedRow();
        ItemViewObject viewObject = getItemNewInfo();
        result = itemService.updateItem(viewObject);
        if (result) {
            model.update(viewObject, selectedRow);
        }
        //update view
        tblItem.updateUI();
        return result;

    }

    private boolean createNewItem() throws ClassNotFoundException, SQLException, 
            ItemInvalidException, ItemExistedException {
        boolean result;
        //call model 
        ItemViewObject viewObject = getItemNewInfo();
        result = itemService.insertItem(viewObject);
        if (result) {
            model.addFirst(viewObject);
        }
        //update view
        txtItemCode.setEnabled(false);
        tblItem.changeSelection(0, 0, false, false);
        tblItem.updateUI();
        return result;
    }
    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        boolean result;
        try {
            if (isAddNew) {
                result = createNewItem();
                isAddNew = false;
            } else {
                result = updateItem();
            }
            if (result) {
                JOptionPane.showMessageDialog(this, "Save successfully");
            }
        } catch (ItemInvalidException e) {
            displayError(e.getMessage());
        } catch (ClassNotFoundException | SQLException e) {
            LOGGER.log(Level.SEVERE, ItemPanel.class.getName() + "::" + e.getMessage());
        } catch (ItemExistedException ex) {
            displayError("Item already existed!");
        }

    }//GEN-LAST:event_btnSaveMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox cboxSupplying;
    private javax.swing.JComboBox<SupplierDTO> comboxSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblItem;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
}
